/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package test;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
/**
 *
 * @author PC
 */
public class ViewItemUI extends javax.swing.JFrame {

    public ViewItemUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        update = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonBack = new javax.swing.JButton();
        jButtonView = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabelItemList1 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButtonFilter = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jComboBoxItemType = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jTable2.setBackground(new java.awt.Color(204, 204, 204));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Name", "Item Price", "Item Type"
            }
        ));
        jScrollPane1.setViewportView(jTable2);

        update.setBackground(new java.awt.Color(0, 102, 153));
        update.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 17)); // NOI18N
        update.setForeground(new java.awt.Color(255, 255, 255));
        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        jButtonDelete.setBackground(new java.awt.Color(0, 102, 153));
        jButtonDelete.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 17)); // NOI18N
        jButtonDelete.setForeground(new java.awt.Color(255, 255, 255));
        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonBack.setBackground(new java.awt.Color(0, 102, 153));
        jButtonBack.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 17)); // NOI18N
        jButtonBack.setForeground(new java.awt.Color(255, 255, 255));
        jButtonBack.setText("Back");
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackActionPerformed(evt);
            }
        });

        jButtonView.setBackground(new java.awt.Color(0, 102, 153));
        jButtonView.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 17)); // NOI18N
        jButtonView.setForeground(new java.awt.Color(255, 255, 255));
        jButtonView.setText("View");
        jButtonView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(0, 102, 153));

        jLabelItemList1.setBackground(new java.awt.Color(0, 102, 153));
        jLabelItemList1.setFont(new java.awt.Font("Segoe UI Black", 1, 26)); // NOI18N
        jLabelItemList1.setForeground(new java.awt.Color(255, 255, 255));
        jLabelItemList1.setText("MANAGE PRODUCTS");

        jLabel9.setIcon(new javax.swing.ImageIcon("C:\\Apple Store\\icon\\inventory.png")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelItemList1, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(jLabel9)
                .addGap(54, 54, 54))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelItemList1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jButtonFilter.setBackground(new java.awt.Color(0, 102, 153));
        jButtonFilter.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 16)); // NOI18N
        jButtonFilter.setForeground(new java.awt.Color(255, 255, 255));
        jButtonFilter.setText("Filter");
        jButtonFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFilterActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 102, 153));
        jButton1.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 17)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBoxItemType.setBackground(new java.awt.Color(0, 102, 153));
        jComboBoxItemType.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 15)); // NOI18N
        jComboBoxItemType.setForeground(new java.awt.Color(255, 255, 255));
        jComboBoxItemType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "iphone", "MacBook", "iPad", "AirTag", "AppleWatch" }));
        jComboBoxItemType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxItemTypeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jButtonView, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(update)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxItemType, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jButtonFilter)
                            .addGap(39, 39, 39))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGap(90, 90, 90)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxItemType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonFilter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(update)
                    .addComponent(jButtonView)
                    .addComponent(jButtonDelete)
                    .addComponent(jButton1)
                    .addComponent(jButtonBack))
                .addGap(66, 66, 66))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed
        
        this.hide();
        ManagerUI frm = new ManagerUI();
        frm.setVisible(true);
    }//GEN-LAST:event_jButtonBackActionPerformed

    private void jButtonViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewActionPerformed
        String filepath = "C:\\Apple Store\\Item.txt";
        File file = new File(filepath);

        try {
            BufferedReader br = new  BufferedReader (new FileReader (file));

            String firstLine = br.readLine().trim();
            String[] coloumnName = firstLine.split(",");
            DefaultTableModel model = ( DefaultTableModel)jTable2.getModel();
            model.setColumnIdentifiers(coloumnName);

            Object[] tableLines = br.lines().toArray();

            for(int i =0; i<tableLines.length;i++)
            {
                String line  = tableLines[i].toString().trim();
                String[]dataRow = line.split(",");
                model.addRow(dataRow);
            }

        }
        catch (IOException ex) {
            Logger.getLogger(ViewItemUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButtonViewActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
DefaultTableModel tableModel = (DefaultTableModel) jTable2.getModel();
int selectedRow = jTable2.getSelectedRow();

if (selectedRow != -1) {
    // Get the data from the selected row and columns
    String[] columnData = new String[tableModel.getColumnCount()];
    for (int i = 0; i < columnData.length; i++) {
        columnData[i] = tableModel.getValueAt(selectedRow, i).toString();
    }

    // Show input fields to update the data
    String[] updatedColumnData = new String[columnData.length];
    String[] columnNames = { "Item Code:", "Item Name:", "Item Price:", "Item Type:" }; 
    JComboBox<String> itemTypeComboBox = new JComboBox<>(new String[] { "iphone", "MacBook", "ipad", "AirTag", "Apple Watch" });

    for (int i = 0; i < columnData.length; i++) {
        if (i == 3) { // "Item Type" column
            itemTypeComboBox.setSelectedItem(columnData[i]);
            int option = JOptionPane.showOptionDialog(
                this,
                itemTypeComboBox,
                "Select updated Item Type",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                null,
                itemTypeComboBox.getSelectedItem()
            );
            if (option == JOptionPane.OK_OPTION) {
                updatedColumnData[i] = itemTypeComboBox.getSelectedItem().toString();
            } else {
                // If the user canceled the update, stop and show a message
                JOptionPane.showMessageDialog(this, "Update canceled");
                return;
            }
        } else {
            String input = JOptionPane.showInputDialog(this, "Enter updated data for " + columnNames[i], columnData[i]);
            if (input == null) {
                // If the user canceled the update, stop and show a message
                JOptionPane.showMessageDialog(this, "Update canceled");
                return;
            }
            updatedColumnData[i] = input;
        }
    }

    // Update the table if the user provided updated data
    for (int i = 0; i < updatedColumnData.length; i++) {
        tableModel.setValueAt(updatedColumnData[i], selectedRow, i);
    }
    //Update the data in the text file
            updateFileFromTableModel(tableModel);

    // Show a success message
    JOptionPane.showMessageDialog(this, "Update successful");
} else {
    // Show a message if no row is selected
    JOptionPane.showMessageDialog(this, "Please select a row to update");
}


    }//GEN-LAST:event_updateActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed

        DefaultTableModel tb1 = (DefaultTableModel) jTable2.getModel();
        int selectedRow = jTable2.getSelectedRow();

        if (selectedRow != -1) {
            tb1.removeRow(selectedRow);
            updateFileFromTableModel(tb1); // Call the method to update the text file
            JOptionPane.showMessageDialog(this, "Product Deleted successfully");
        } else {
            if (tb1.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Table is empty, no user to delete.");
            } else {
                JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            }
        }
        }

        private void updateFileFromTableModel(DefaultTableModel model) {
            String filepath = "C:\\Apple Store\\Item.txt";
            File file = new File(filepath);

            try (BufferedWriter bw = new BufferedWriter(new FileWriter(file))) {
                int rowCount = model.getRowCount();
                int colCount = model.getColumnCount();

                // Write column names to the file
                StringBuilder colHeader = new StringBuilder();
                for (int col = 0; col < colCount; col++) {
                    colHeader.append(model.getColumnName(col));
                    if (col < colCount - 1) {
                        colHeader.append(",");
                    }
                }
                bw.write(colHeader.toString());
                bw.newLine();

                // Write data rows to the file
                for (int row = 0; row < rowCount; row++) {
                    StringBuilder dataRow = new StringBuilder();
                    for (int col = 0; col < colCount; col++) {
                        dataRow.append(model.getValueAt(row, col));
                        if (col < colCount - 1) {
                            dataRow.append(",");
                        }
                    }
                    bw.write(dataRow.toString());
                    bw.newLine();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }

            //     DefaultTableModel  tb1 =  (DefaultTableModel)  jTableView.getModel();
            //      if(jTableView.getSelectedRowCount()==1){
                //
                //          tb1.removeRow(jTableView.getSelectedRow());
                //      }else{
                //          if(jTableView.getRowCount()==0){
                    //              JOptionPane.showMessageDialog(this,"Delete successfully");
                    //          }else{
                    //              JOptionPane.showMessageDialog(this, "Delete unsuccessfull");
                    //          }
                //      }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFilterActionPerformed


    // Get the selected item type from the combo box
    String selectedItemType = jComboBoxItemType.getSelectedItem().toString();

    DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
    TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
    jTable2.setRowSorter(sorter);

    // Set the RowFilter for the TableRowSorter to filter data based on selected item type
    if (!selectedItemType.equals("All")) {
        RowFilter<DefaultTableModel, Object> rf = RowFilter.regexFilter(selectedItemType, 3); // 3 is the column index for "Item Type"
        sorter.setRowFilter(rf);
    } else {
        sorter.setRowFilter(null); // Remove the filter if "All" is selected
    }

    }//GEN-LAST:event_jButtonFilterActionPerformed

    private void jComboBoxItemTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxItemTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxItemTypeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       DefaultTableModel tableModel = (DefaultTableModel) jTable2.getModel();
        tableModel.setRowCount(0);

        // Remove any existing filters
        TableRowSorter<DefaultTableModel> sorter = (TableRowSorter<DefaultTableModel>) jTable2.getRowSorter();
        if (sorter != null) {
            sorter.setRowFilter(null);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

//    private void filterDataByItemType(String itemType) {
//        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
//        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
//        jTable2.setRowSorter(sorter);
//
//        if (itemType.equals("All")) {
//            sorter.setRowFilter(null);
//        } else {
//            RowFilter<DefaultTableModel, Object> rowFilter = RowFilter.regexFilter(itemType, 3); // 3 is the column index for "Item Type"
//            sorter.setRowFilter(rowFilter);
//        }
//    }
    
   
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewItemUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewItemUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewItemUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewItemUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewItemUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonFilter;
    private javax.swing.JButton jButtonView;
    private javax.swing.JComboBox<String> jComboBoxItemType;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelItemList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
